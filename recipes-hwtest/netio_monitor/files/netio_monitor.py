#!/usr/bin/python3
import sys
import argparse
import socket
import socket_reader
import datetime

tool_description = """
Tool to monitor the messages generated by netio test firmware.
"""


def main(args):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(5.0)
    print("try to connect to port", args.port)
    sock.connect((args.ip, args.port))
    print("connected.")
    reader = socket_reader.SocketReader(sock)

    exit_code = 1
    start_time = datetime.datetime.now()
    last_info_print = datetime.datetime.now()
    last_msg = datetime.datetime.now()
    error_count = 0

    while True:
        if args.runtime is not None and (datetime.datetime.now() - start_time).total_seconds() > args.runtime:
            exit_code = 0
            break

        try:
            line = reader.readline()
        except socket.timeout:
            print("No more activity detected from netio. Crashed? Fatal. Exit")
            break

        if len(line) == 0:
            print("netio closed socket. Fatal. Exit")
            break

        line = line.replace('\n','')

        if line.startswith("ERR: "):
            last_msg = datetime.datetime.now()
            print("Received error message '%s'" % line)
            error_count += 1
            if error_count >= args.error_threshold:
                print("Reached error threshold. Exit")
                break

        if line.startswith("INF: "):
            last_msg = datetime.datetime.now()
            if args.verbose:
                print("Received Info '%s'" % line)

        if (datetime.datetime.now() - last_msg).total_seconds() >= 2:
            print("No INF/ERR messages from netio. Crashed? Fatal. Exit")
            break

        if (datetime.datetime.now() - last_info_print).total_seconds() >= 5:
            print("Netio still alive")
            last_info_print = datetime.datetime.now()

    return exit_code

def command_line_args_parsing():
    parser = argparse.ArgumentParser(description=tool_description)
    parser.add_argument("ip", help="Name or IP of netio module")
    parser.add_argument("port", help="TCP port of netio module", type=int)
    parser.add_argument(
        "-e",
        "--error_threshold",
        help="stop after n errors, -1 to stop never (default: 1)",
        type=int,
        default=1,
    )
    parser.add_argument(
        "-r",
        "--runtime",
        help="run for n seconds. (default: endless)",
        type=int,
        default=None,
    )
    parser.add_argument(
        "-v",
        "--verbose",
        help="Be verbose",
        action="store_true",
    )
    return parser.parse_args()


if __name__ == "__main__":
    args = command_line_args_parsing()
    sys.exit(main(args))
